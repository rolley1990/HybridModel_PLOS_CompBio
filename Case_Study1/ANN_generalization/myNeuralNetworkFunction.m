function Y = myNeuralNetworkFunction(X,HP)
%MYNEURALNETWORKFUNCTION neural network simulation function.
%
% Auto-generated by MATLAB, 21-Jun-2020 22:20:01.
%
% [Y] = myNeuralNetworkFunction(X,~,~) takes these arguments:
%
%   X = 1xTS cell, 1 inputs over TS timesteps
%   Each X{1,ts} = 5xQ matrix, input #1 at timestep ts.
%
% and returns:
%   Y = 1xTS cell of 1 outputs over TS timesteps.
%   Each Y{1,ts} = 1xQ matrix, output #1 at timestep ts.
%
% where Q is number of samples (or series) and TS is the number of timesteps.

%#ok<*RPMT0>

% ===== NEURAL NETWORK CONSTANTS =====

% Input 1
x1_step1.xoffset = [0;0;0.290008377946371;0.305562790782091;0];
x1_step1.gain = [4.63984365104146;7.58826769716333;6.3782520790726;6.24408441154967;0.142857142857143];
x1_step1.ymin = -1;

% Layer 1
%b1 = [2.4757222948068227097;1.962151446289087886;-1.4407943587157732157;0.55862897216880313955;-0.074055162318940506716;-0.73971334980607295062;-0.89539564082830680469;1.7121033472318660795;2.1474451769208244833];
b1=HP(1:9);
%IW1_1 = [-0.71759080433966204726 -0.92419986940237719431 1.184924262234321457 1.0566874545007036712 -0.75270109914461502676;-1.3287815413639456619 -1.2141699929828264626 -0.027465772717804270292 -0.84712983582722156672 -0.54309615148787449002;0.18031406284150350294 0.31559748685561977988 1.8501280161933555402 -0.0014078463454604474986 -0.67752585463759262829;-0.93979958336835334176 1.2163230692916962017 1.3742870206473598582 -0.094037802697093081372 -0.68613515699379790114;1.2689331144644337979 -0.023897920576024522799 1.4449573636357893047 0.78263003133232422748 -1.2644670169458311904;-1.1427727130965150693 1.4829404179578804523 0.61134858877120501486 0.76361902494652744711 -0.29899246982765759206;0.21795401768160685418 -0.70763602174687190161 1.0076202299148213637 -1.4243495709583349207 -1.6103628589110752234;1.0000867438794898145 -1.1282106630313601947 -1.449032168134315679 -0.034168610434418267285 -0.26378312991712288271;0.57336297880225739476 -0.99449928214612459687 1.0695678675334630015 -1.4018221395178700472 0.69473315970166260591];
iw=HP(1:9*5)+9;
IW1_1=reshape(iw,9,5);

% Layer 2
%b2 = -1.0856318119679164713;
b2=HP(9*5+9+1);
%LW2_1 = [0.92548360405632956738 -0.46885371344744841693 -0.18586039558414305106 -0.046637349905483738155 0.77208137299380785734 0.11838133689810920179 -0.37631117361749621963 -0.0086525640459988520381 0.23609970009395711554];
lw=HP(1:9)+9*5+9+1;
LW2_1=lw';

% Output 1
y1_step1.ymin = -1;
y1_step1.gain = 30.611868150998;
y1_step1.xoffset = -0.00989783079879308;

% ===== SIMULATION ========

% Format Input Arguments
isCellX = iscell(X);
if ~isCellX
    X = {X};
end

% Dimensions
TS = size(X,2); % timesteps
if ~isempty(X)
    Q = size(X{1},2); % samples/series
else
    Q = 0;
end

% Allocate Outputs
Y = cell(1,TS);

% Time loop
for ts=1:TS
    
    % Input 1
    Xp1 = mapminmax_apply(X{1,ts},x1_step1);
    
    % Layer 1
    a1 = tansig_apply(repmat(b1,1,Q) + IW1_1*Xp1);
    
    % Layer 2
    a2 = repmat(b2,1,Q) + LW2_1*a1;
    
    % Output 1
    Y{1,ts} = mapminmax_reverse(a2,y1_step1);
end

% Final Delay States
Xf = cell(1,0);
Af = cell(2,0);

% Format Output Arguments
if ~isCellX
    Y = cell2mat(Y);
end
end

% ===== MODULE FUNCTIONS ========

% Map Minimum and Maximum Input Processing Function
function y = mapminmax_apply(x,settings)
y = bsxfun(@minus,x,settings.xoffset);
y = bsxfun(@times,y,settings.gain);
y = bsxfun(@plus,y,settings.ymin);
end

% Sigmoid Symmetric Transfer Function
function a = tansig_apply(n,~)
a = 2 ./ (1 + exp(-2*n)) - 1;
end

% Map Minimum and Maximum Output Reverse-Processing Function
function x = mapminmax_reverse(y,settings)
x = bsxfun(@minus,y,settings.ymin);
x = bsxfun(@rdivide,x,settings.gain);
x = bsxfun(@plus,x,settings.xoffset);
end
